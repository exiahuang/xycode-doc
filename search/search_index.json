{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"xycode is a lightweight command executor for vscode. If you want to build a vscode extension, maybe you can use xycode first. Reference \u00b6 Project Details vscode market xycode exiahuang/Xycode xycode-config Document Usage: xycode English xycode \u65e5\u672c\u8a9e xycode \u4e2d\u6587 Salesforce CLI in xycode C Program in xycode Nodejs in xycode python in xycode Features \u00b6 [x] Less than 100k. [x] Shared configuration (tasks/settings) of VScode. [x] Integrated with system command and work with vscode. [x] Support c lang. [x] Support vbs. [x] Support dotnet core. [x] Support go language. [x] Support python. [x] Support ruby. [x] Support gradle. [x] Support npm/nodejs/express/vue. [x] Support prettier, format source automatically. [x] Support Heroku development. [x] Support git command. [x] Support sfdx, it is a Rapid development tool for Salesforce SFDX Development. Metadata diff with server, retrieve standard sobject... [x] Support Wenyan \u6587\u8a00\u6587\u7de8\u7a0b\u8a9e\u8a00. [x] Support hexo/mkdoc blog. [x] Support WSL Develope. [ ] TODO : jekyll . [ ] TODO : Docker development. [ ] TODO : a calculator. Download config \u00b6 Download in Vscode \u00b6 run xycode: download config , and select config file. Manually Download \u00b6 Please download config From xycode-config . And copy the configs to Home directory( ~/.xycode or %USERPROFILE%/.xycode ) use ctrl+shift+p , search xycode: open config directory Custom Config \u00b6 create json file \u00b6 create json file in below Windows user: %USERPROFILE%/.xycode Linux/Mac user: ~/.xycode json data construct \u00b6 { \"tasks\" : [ { \"label\" : \"label name, required\" , \"description\" : \"description, not required\" , \"command\" : \"your command, required\" , // cwd is not required \"cwd\" : \"path of current working directory\" , // filetypes is not required // \"filetypes\" : [ \".py\" ], // if you not need the command , please set it true // \"inActive\" : false , // show the message in termial, default show in channel. // \"termial\" : { name?: string, shellPath?: string, shellArgs?: string[] | string } ; // before run the command , you can set some check. \"beforeTriggers\" : [ { \"type\" : \"buildin\" , \"fn\" : \"CheckFileExist\" , \"params\" : [ \"${project_directory}/${project_name}\" ] } ], // after ran the command, you can do something. \"afterTriggers\" : [ { \"type\" : \"buildin\" , \"fn\" : \"SwitchFolder\" , \"params\" : [ \"${project_directory}/${project_name}\" ] } ] } ], \"variables\" : { \"apex_template\" : { \"label\" : \"sfdc apex template\" , \"description\" : \"\" , \"value\" : [ \"DefaultApexClass\" , \"ApexException\" , \"ApexUnitTest\" , \"InboundEmailService\" ] }, \"base_metadata\" : { \"label\" : \"default sfdc metadata\" , \"description\" : \"\" , \"value\" : \"ApexClass, ApexPage, ApexComponent, ApexTrigger\" } } } Predefined variables \u00b6 \\${HOME} - Home directory \\${file} - the current opened file \\${relativeFile} - the current opened file relative to workspaceFolder \\${relativeFileDirname} - the current opened file's dirname relative to workspaceFolder \\${fileBasename} - the current opened file's basename \\${fileBasenameNoExtension} - the current opened file's basename with no file extension \\${workspaceFolder} - the path of the folder opened \\${workspaceFolderBasename} - the name of the folder opened in Sublime without any slashes (/) \\${fileDirname} - the current opened file's dirname \\${fileExtname} - the current opened file's extension \\${YYYYMMDD} - current date \\${YYYYMMDD_HHmm} - current datetime \\${TMPDIR} - Temp directory \\${XYCODE_PATH} - XYCODE Extension path Windows Only Predefined variables: \\${wslHOME} - WSL Home directory \\${wslTMPDIR} - WSL Temp directory \\${wslFile} - the current opened wsl file path \\${wslWorkspaceFolder} - the wsl path of the folder opened \\${wslFileDirname} - the current opened file's wsl dirname Predefined trigger \u00b6 Mkdirs - make directory SwitchFolder - switch project folder OpenFile - open file CopyFile - copy file CheckFileExist - check file exist Diff - diff file friendly user interface \u00b6 input - Custom Input String select - Select List multiselect - Multiple Select List openFolderDailog - Folder Path Selector singleFileDailog - File Path Selector multiFilesDailog - Mutliple File Paths Selector support wslpath \u00b6 use |wslpath to change the windows path to wsl path example : get the wsl path of folder: echo ${openFolderDailog:project_directory|wslpath} get the wsl path of current file: echo ${file|wslpath} config example \u00b6 example 1: input \u00b6 echo user input { \"tasks\" : [ { \"label\" : \"hello:echo:user-input\" , \"description\" : \"echo user input\" , \"command\" : \"echo ${input:project_directory}\" } ], \"variables\" : {} } if you want to set the default value, please define the variable: { \"tasks\" : [ { \"label\" : \"hello:echo:user-input\" , \"description\" : \"echo user input\" , \"command\" : \"echo ${input:project_directory}\" } ], \"variables\" : { \"project_directory\" : { \"label\" : \"project directory\" , \"value\" : \"${HOME}/test-project\" } } } example 2: select \u00b6 echo user select { \"tasks\" : [ { \"label\" : \"hello:echo:user-select\" , \"description\" : \"echo user select\" , \"command\" : \"echo ${select:dotnet_template}\" } ], \"variables\" : { \"dotnet_template\" : { \"label\" : \"dotnet core template\" , \"value\" : [ \"console\" , \"classlib\" , \"wpf\" , \"wpflib\" , \"wpfcustomcontrollib\" , \"wpfusercontrollib\" , \"winforms\" ] } } } example 3: multiselect \u00b6 echo files path, you can use separator to control the result string. { \"tasks\" : [ { \"label\" : \"hello:echo:multiselect\" , \"description\" : \"echo user multiselect\" , \"command\" : \"echo ${multiselect:METADATA}\" } ], \"variables\" : { \"METADATA\" : { \"label\" : \"sfdc metadata\" , \"separator\" : \",\" , \"value\" : [ \"ApexClass\" , \"ApexComponent\" , \"ApexPage\" , \"ApexTestSuite\" , \"ApexTrigger\" ] } } } example 4: openFolderDailog \u00b6 echo directory path { \"tasks\" : [ { \"label\" : \"hello:echo:folder-path\" , \"description\" : \"echo directory\" , \"command\" : \"echo ${openFolderDailog:project_directory}\" } ], \"variables\" : {} } example 5: singleFileDailog \u00b6 single file dailog, you can use filters to control the file type. { \"tasks\" : [ { \"label\" : \"hello:echo:file-path\" , \"description\" : \"echo single file path\" , \"command\" : \"echo ${singleFileDailog:package_xml}\" } ], \"variables\" : { \"package_xml\" : { \"label\" : \"sfdc package.xml path\" , \"filters\" : { \"package.xml\" : [ \"xml\" ] }, \"value\" : \"./manifest/package.xml\" } } } example 6: multiFilesDailog \u00b6 Mutliple File Paths Selector use filters to control the file type. use separator to control the result string. { \"tasks\" : [ { \"label\" : \"hello:echo:files-paths\" , \"description\" : \"echo files paths\" , \"command\" : \"echo ${multiFilesDailog:sfdcsourcesfiles}\" } ], \"variables\" : { \"sfdcsourcesfiles\" : { \"label\" : \"sfdc sources files\" , \"separator\" : \",\" , \"value\" : \"\" } } } example 7: run command in wsl \u00b6 change the shellPath, you can run command in wsl/bash/powershell ... or other termial { \"label\" : \"run command in wsl\" , \"termial\" : { \"name\" : \"xycode\" , \"shellPath\" : \"wsl.exe\" }, \"command\" : \"pwd\" } example 8: auto formatter and auto runner \u00b6 After you save file in vscode, It will use yapf to format code and run python code automatically. { \"tasks\" : [], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"format python code\" , \"description\" : \"format python code\" , \"filetypes\" : [ \".py\" ], \"inActive\" : false , \"command\" : \"yapf \\\"${file}\\\" --style \\\"google\\\" -i\" }, { \"label\" : \"run python file\" , \"description\" : \"run python file\" , \"filetypes\" : [ \".py\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"python \\\"${file}\\\"\" } ] } example 10: user prettier to format source code. \u00b6 use Prettier to pretty code . { \"tasks\" : [], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"pretty code.\" , \"description\" : \"Prettier is an opinionated code formatter.\" , \"filetypes\" : [ \".json\" , \".javascript\" , \".js\" , \".md\" , \".css\" , \".vue\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"prettier --write \\\"${file}\\\" --single-quote=true --end-of-line=lf --arrow-parens=always --tab-width=4\" } ] } example 11: use wsl. \u00b6 { \"tasks\" : [ { \"label\" : \"hello:echo:wsl-folder-path\" , \"description\" : \"echo directory\" , \"options\" : { \"shell\" : \"C:\\\\Windows\\\\System32\\\\bash.exe\" }, \"command\" : \"echo ${openFolderDailog:project_directory|wslpath}\" } ], \"variables\" : {} } example 12: define console. \u00b6 { \"tasks\" : [ { \"label\" : \"console: WSL\" , \"description\" : \"open WSL\" , \"notShowProcess\" : true , \"command\" : \"cd ${workspaceFolder} && start wsl\" }, { \"label\" : \"console: cmd\" , \"description\" : \"open cmd\" , \"notShowProcess\" : true , \"command\" : \"start cmd\" }, { \"label\" : \"console: Cmder\" , \"description\" : \"open Cmder\" , \"notShowProcess\" : true , \"command\" : \"Cmder.exe /single ${workspaceFolder}\" }, { \"label\" : \"console: bash\" , \"description\" : \"open bash\" , \"notShowProcess\" : true , \"command\" : \"cd ${workspaceFolder} && start bash\" }, { \"label\" : \"console: mintty.exe\" , \"description\" : \"open mintty.exe\" , \"notShowProcess\" : true , \"command\" : \"start /b mintty.exe /bin/bash --login\" } ], \"variables\" : {} } example 13: explorer and sublime \u00b6 open directory in windows explorer or sublime . { \"tasks\" : [ { \"label\" : \"windows: explorer\" , \"description\" : \"open explorer\" , \"notShowProcess\" : true , \"command\" : \"start explorer ${workspaceFolder}\" }, { \"label\" : \"windows: open home directory\" , \"description\" : \"open home directory\" , \"notShowProcess\" : true , \"command\" : \"start explorer ${HOME}\" }, { \"label\" : \"sublime\" , \"description\" : \"open sublime\" , \"notShowProcess\" : true , \"command\" : \"\\\"C:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\\\" \\\"${openFolderDailog:project_directory}\\\"\" }, { \"label\" : \"sublime:open this workspace\" , \"description\" : \"open sublime\" , \"notShowProcess\" : true , \"command\" : \"\\\"C:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\\\" \\\"${workspaceFolder}\\\"\" } ], \"variables\" : {} } Shortkey \u00b6 shortkey: ctrl+shift+i Requirements \u00b6 Require commands which you set in your config file in ~/.xycode/*.json Extension Settings \u00b6 This extension contributes the following settings: xycode.maxBuffer : The maxBuffer option specifies the largest number of bytes allowed on stdout or stderr.","title":"Home"},{"location":"#reference","text":"Project Details vscode market xycode exiahuang/Xycode xycode-config Document Usage: xycode English xycode \u65e5\u672c\u8a9e xycode \u4e2d\u6587 Salesforce CLI in xycode C Program in xycode Nodejs in xycode python in xycode","title":"Reference"},{"location":"#features","text":"[x] Less than 100k. [x] Shared configuration (tasks/settings) of VScode. [x] Integrated with system command and work with vscode. [x] Support c lang. [x] Support vbs. [x] Support dotnet core. [x] Support go language. [x] Support python. [x] Support ruby. [x] Support gradle. [x] Support npm/nodejs/express/vue. [x] Support prettier, format source automatically. [x] Support Heroku development. [x] Support git command. [x] Support sfdx, it is a Rapid development tool for Salesforce SFDX Development. Metadata diff with server, retrieve standard sobject... [x] Support Wenyan \u6587\u8a00\u6587\u7de8\u7a0b\u8a9e\u8a00. [x] Support hexo/mkdoc blog. [x] Support WSL Develope. [ ] TODO : jekyll . [ ] TODO : Docker development. [ ] TODO : a calculator.","title":"Features"},{"location":"#download-config","text":"","title":"Download config"},{"location":"#download-in-vscode","text":"run xycode: download config , and select config file.","title":"Download in Vscode"},{"location":"#manually-download","text":"Please download config From xycode-config . And copy the configs to Home directory( ~/.xycode or %USERPROFILE%/.xycode ) use ctrl+shift+p , search xycode: open config directory","title":"Manually Download"},{"location":"#custom-config","text":"","title":"Custom Config"},{"location":"#create-json-file","text":"create json file in below Windows user: %USERPROFILE%/.xycode Linux/Mac user: ~/.xycode","title":"create json file"},{"location":"#json-data-construct","text":"{ \"tasks\" : [ { \"label\" : \"label name, required\" , \"description\" : \"description, not required\" , \"command\" : \"your command, required\" , // cwd is not required \"cwd\" : \"path of current working directory\" , // filetypes is not required // \"filetypes\" : [ \".py\" ], // if you not need the command , please set it true // \"inActive\" : false , // show the message in termial, default show in channel. // \"termial\" : { name?: string, shellPath?: string, shellArgs?: string[] | string } ; // before run the command , you can set some check. \"beforeTriggers\" : [ { \"type\" : \"buildin\" , \"fn\" : \"CheckFileExist\" , \"params\" : [ \"${project_directory}/${project_name}\" ] } ], // after ran the command, you can do something. \"afterTriggers\" : [ { \"type\" : \"buildin\" , \"fn\" : \"SwitchFolder\" , \"params\" : [ \"${project_directory}/${project_name}\" ] } ] } ], \"variables\" : { \"apex_template\" : { \"label\" : \"sfdc apex template\" , \"description\" : \"\" , \"value\" : [ \"DefaultApexClass\" , \"ApexException\" , \"ApexUnitTest\" , \"InboundEmailService\" ] }, \"base_metadata\" : { \"label\" : \"default sfdc metadata\" , \"description\" : \"\" , \"value\" : \"ApexClass, ApexPage, ApexComponent, ApexTrigger\" } } }","title":"json data construct"},{"location":"#predefined-variables","text":"\\${HOME} - Home directory \\${file} - the current opened file \\${relativeFile} - the current opened file relative to workspaceFolder \\${relativeFileDirname} - the current opened file's dirname relative to workspaceFolder \\${fileBasename} - the current opened file's basename \\${fileBasenameNoExtension} - the current opened file's basename with no file extension \\${workspaceFolder} - the path of the folder opened \\${workspaceFolderBasename} - the name of the folder opened in Sublime without any slashes (/) \\${fileDirname} - the current opened file's dirname \\${fileExtname} - the current opened file's extension \\${YYYYMMDD} - current date \\${YYYYMMDD_HHmm} - current datetime \\${TMPDIR} - Temp directory \\${XYCODE_PATH} - XYCODE Extension path Windows Only Predefined variables: \\${wslHOME} - WSL Home directory \\${wslTMPDIR} - WSL Temp directory \\${wslFile} - the current opened wsl file path \\${wslWorkspaceFolder} - the wsl path of the folder opened \\${wslFileDirname} - the current opened file's wsl dirname","title":"Predefined variables"},{"location":"#predefined-trigger","text":"Mkdirs - make directory SwitchFolder - switch project folder OpenFile - open file CopyFile - copy file CheckFileExist - check file exist Diff - diff file","title":"Predefined trigger"},{"location":"#friendly-user-interface","text":"input - Custom Input String select - Select List multiselect - Multiple Select List openFolderDailog - Folder Path Selector singleFileDailog - File Path Selector multiFilesDailog - Mutliple File Paths Selector","title":"friendly user interface"},{"location":"#support-wslpath","text":"use |wslpath to change the windows path to wsl path example : get the wsl path of folder: echo ${openFolderDailog:project_directory|wslpath} get the wsl path of current file: echo ${file|wslpath}","title":"support wslpath"},{"location":"#config-example","text":"","title":"config example"},{"location":"#example-1-input","text":"echo user input { \"tasks\" : [ { \"label\" : \"hello:echo:user-input\" , \"description\" : \"echo user input\" , \"command\" : \"echo ${input:project_directory}\" } ], \"variables\" : {} } if you want to set the default value, please define the variable: { \"tasks\" : [ { \"label\" : \"hello:echo:user-input\" , \"description\" : \"echo user input\" , \"command\" : \"echo ${input:project_directory}\" } ], \"variables\" : { \"project_directory\" : { \"label\" : \"project directory\" , \"value\" : \"${HOME}/test-project\" } } }","title":"example 1: input"},{"location":"#example-2-select","text":"echo user select { \"tasks\" : [ { \"label\" : \"hello:echo:user-select\" , \"description\" : \"echo user select\" , \"command\" : \"echo ${select:dotnet_template}\" } ], \"variables\" : { \"dotnet_template\" : { \"label\" : \"dotnet core template\" , \"value\" : [ \"console\" , \"classlib\" , \"wpf\" , \"wpflib\" , \"wpfcustomcontrollib\" , \"wpfusercontrollib\" , \"winforms\" ] } } }","title":"example 2: select"},{"location":"#example-3-multiselect","text":"echo files path, you can use separator to control the result string. { \"tasks\" : [ { \"label\" : \"hello:echo:multiselect\" , \"description\" : \"echo user multiselect\" , \"command\" : \"echo ${multiselect:METADATA}\" } ], \"variables\" : { \"METADATA\" : { \"label\" : \"sfdc metadata\" , \"separator\" : \",\" , \"value\" : [ \"ApexClass\" , \"ApexComponent\" , \"ApexPage\" , \"ApexTestSuite\" , \"ApexTrigger\" ] } } }","title":"example 3: multiselect"},{"location":"#example-4-openfolderdailog","text":"echo directory path { \"tasks\" : [ { \"label\" : \"hello:echo:folder-path\" , \"description\" : \"echo directory\" , \"command\" : \"echo ${openFolderDailog:project_directory}\" } ], \"variables\" : {} }","title":"example 4: openFolderDailog"},{"location":"#example-5-singlefiledailog","text":"single file dailog, you can use filters to control the file type. { \"tasks\" : [ { \"label\" : \"hello:echo:file-path\" , \"description\" : \"echo single file path\" , \"command\" : \"echo ${singleFileDailog:package_xml}\" } ], \"variables\" : { \"package_xml\" : { \"label\" : \"sfdc package.xml path\" , \"filters\" : { \"package.xml\" : [ \"xml\" ] }, \"value\" : \"./manifest/package.xml\" } } }","title":"example 5: singleFileDailog"},{"location":"#example-6-multifilesdailog","text":"Mutliple File Paths Selector use filters to control the file type. use separator to control the result string. { \"tasks\" : [ { \"label\" : \"hello:echo:files-paths\" , \"description\" : \"echo files paths\" , \"command\" : \"echo ${multiFilesDailog:sfdcsourcesfiles}\" } ], \"variables\" : { \"sfdcsourcesfiles\" : { \"label\" : \"sfdc sources files\" , \"separator\" : \",\" , \"value\" : \"\" } } }","title":"example 6: multiFilesDailog"},{"location":"#example-7-run-command-in-wsl","text":"change the shellPath, you can run command in wsl/bash/powershell ... or other termial { \"label\" : \"run command in wsl\" , \"termial\" : { \"name\" : \"xycode\" , \"shellPath\" : \"wsl.exe\" }, \"command\" : \"pwd\" }","title":"example 7: run command in wsl"},{"location":"#example-8-auto-formatter-and-auto-runner","text":"After you save file in vscode, It will use yapf to format code and run python code automatically. { \"tasks\" : [], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"format python code\" , \"description\" : \"format python code\" , \"filetypes\" : [ \".py\" ], \"inActive\" : false , \"command\" : \"yapf \\\"${file}\\\" --style \\\"google\\\" -i\" }, { \"label\" : \"run python file\" , \"description\" : \"run python file\" , \"filetypes\" : [ \".py\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"python \\\"${file}\\\"\" } ] }","title":"example 8: auto formatter and auto runner"},{"location":"#example-10-user-prettier-to-format-source-code","text":"use Prettier to pretty code . { \"tasks\" : [], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"pretty code.\" , \"description\" : \"Prettier is an opinionated code formatter.\" , \"filetypes\" : [ \".json\" , \".javascript\" , \".js\" , \".md\" , \".css\" , \".vue\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"prettier --write \\\"${file}\\\" --single-quote=true --end-of-line=lf --arrow-parens=always --tab-width=4\" } ] }","title":"example 10: user prettier to format source code."},{"location":"#example-11-use-wsl","text":"{ \"tasks\" : [ { \"label\" : \"hello:echo:wsl-folder-path\" , \"description\" : \"echo directory\" , \"options\" : { \"shell\" : \"C:\\\\Windows\\\\System32\\\\bash.exe\" }, \"command\" : \"echo ${openFolderDailog:project_directory|wslpath}\" } ], \"variables\" : {} }","title":"example 11: use wsl."},{"location":"#example-12-define-console","text":"{ \"tasks\" : [ { \"label\" : \"console: WSL\" , \"description\" : \"open WSL\" , \"notShowProcess\" : true , \"command\" : \"cd ${workspaceFolder} && start wsl\" }, { \"label\" : \"console: cmd\" , \"description\" : \"open cmd\" , \"notShowProcess\" : true , \"command\" : \"start cmd\" }, { \"label\" : \"console: Cmder\" , \"description\" : \"open Cmder\" , \"notShowProcess\" : true , \"command\" : \"Cmder.exe /single ${workspaceFolder}\" }, { \"label\" : \"console: bash\" , \"description\" : \"open bash\" , \"notShowProcess\" : true , \"command\" : \"cd ${workspaceFolder} && start bash\" }, { \"label\" : \"console: mintty.exe\" , \"description\" : \"open mintty.exe\" , \"notShowProcess\" : true , \"command\" : \"start /b mintty.exe /bin/bash --login\" } ], \"variables\" : {} }","title":"example 12: define console."},{"location":"#example-13-explorer-and-sublime","text":"open directory in windows explorer or sublime . { \"tasks\" : [ { \"label\" : \"windows: explorer\" , \"description\" : \"open explorer\" , \"notShowProcess\" : true , \"command\" : \"start explorer ${workspaceFolder}\" }, { \"label\" : \"windows: open home directory\" , \"description\" : \"open home directory\" , \"notShowProcess\" : true , \"command\" : \"start explorer ${HOME}\" }, { \"label\" : \"sublime\" , \"description\" : \"open sublime\" , \"notShowProcess\" : true , \"command\" : \"\\\"C:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\\\" \\\"${openFolderDailog:project_directory}\\\"\" }, { \"label\" : \"sublime:open this workspace\" , \"description\" : \"open sublime\" , \"notShowProcess\" : true , \"command\" : \"\\\"C:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\\\" \\\"${workspaceFolder}\\\"\" } ], \"variables\" : {} }","title":"example 13: explorer and sublime"},{"location":"#shortkey","text":"shortkey: ctrl+shift+i","title":"Shortkey"},{"location":"#requirements","text":"Require commands which you set in your config file in ~/.xycode/*.json","title":"Requirements"},{"location":"#extension-settings","text":"This extension contributes the following settings: xycode.maxBuffer : The maxBuffer option specifies the largest number of bytes allowed on stdout or stderr.","title":"Extension Settings"},{"location":"index.ja/","text":"xycode \u00b6 xycode vscode \u306e\u8efd\u91cf\u30b3\u30de\u30f3\u30c9\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\u3067\u3059. vscode \u62e1\u5f35\u6a5f\u80fd\u3092\u4f5c\u308b\u524d\u306b\u3001 xycode \u3092\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 \u6a5f\u80fd \u00b6 \u62e1\u5f35\u306e\u30b5\u30a4\u30ba\u306f 100k \u672a\u6e80\u3002 \u30b3\u30de\u30f3\u30c9\u3092\u7d71\u5408\u3057\u3066\u3001vscode \u62e1\u5f35\u6a5f\u80fd\u3068\u3057\u3066\u3001vscode \u3067\u5229\u7528\u53ef\u80fd\u3002 Salesforce SFDX \u5c02\u7528\u958b\u767a\u30c4\u30fc\u30eb\u3002 Heroku \u958b\u767a\u3002 Git \u30b3\u30de\u30f3\u30c9\u7d71\u5408\u3002 Docker \u958b\u767a\u3002 prettier \u62e1\u5f35\u3001\u81ea\u52d5\u6575\u306b\u30b3\u30fc\u30c9\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3059\u308b\u3002 Python\u3001Go\u3001Ruby\u3001C\u3001C ++\u3001Dotnet Core\u3001Java \u306a\u3069\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3092\u7d71\u5408\u3002 hexo\u3001jekyll\u3001mkdoc \u306a\u3069\u306e\u30d6\u30ed\u30b0\u3092\u4f5c\u6210\u3002 Wenyan \u53e4\u5178\u4e2d\u56fd\u8a9e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u958b\u767a\u3002 \u4e00\u5ea6\u8a2d\u5b9a\u3057\u305f\u5f8c\u3001\u30b0\u30eb\u30d0\u30fc\u30eb\u518d\u5229\u7528\u53ef\u80fd\u3002 \u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u65b9\u6cd5 \u00b6 vscode \u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b \u00b6 vscode \u3067 xycode: download config \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3001\u65e2\u5b58\u306e\u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u53ef\u80fd\u3067\u3059\u3002 github \u7d4c\u7531\u3057\u3066\u3001\u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b \u00b6 github xycode-config \u3000\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001 \u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001\u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u30d5\u30a9\u30eb\u30c0\u3068\u306f\uff1f Linux/Mac \u306e\u5834\u5408 ~/.xycode windows \u306e\u5834\u5408: %USERPROFILE%/.xycode \u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba \u00b6 \u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210 \u00b6 \u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u30d5\u30a9\u30eb\u30c0\u306b\u3001json \u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002 \u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u306e\u69cb\u6210 \u00b6 { \"tasks\" : [ { \"label\" : \"label name, required\" , \"description\" : \"description, not required\" , \"command\" : \"your command, required\" , // cwd is not required \"cwd\" : \"path of current working directory\" , // filetypes is not required // \"filetypes\" : [ \".py\" ], // if you not need the command , please set it true // \"inActive\" : false , // show the message in termial, default show in channel. // \"termial\" : { name?: string, shellPath?: string, shellArgs?: string[] | string } ; // before run the command , you can set some check. \"beforeTriggers\" : [ { \"type\" : \"buildin\" , \"fn\" : \"CheckFileExist\" , \"params\" : [ \"${project_directory}/${project_name}\" ] } ], // after ran the command, you can do something. \"afterTriggers\" : [ { \"type\" : \"buildin\" , \"fn\" : \"SwitchFolder\" , \"params\" : [ \"${project_directory}/${project_name}\" ] } ] } ], \"variables\" : { \"apex_template\" : { \"label\" : \"sfdc apex template\" , \"description\" : \"\" , \"value\" : [ \"DefaultApexClass\" , \"ApexException\" , \"ApexUnitTest\" , \"InboundEmailService\" ] }, \"base_metadata\" : { \"label\" : \"default sfdc metadata\" , \"description\" : \"\" , \"value\" : \"ApexClass, ApexPage, ApexComponent, ApexTrigger\" } }, \"onSaveEvents\" : [ { \"label\" : \"compile and run c file\" , \"description\" : \"compile and run c file after save\" , \"filetypes\" : [ \".c\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"gcc -o ${fileBasenameNoExtension} ${file} && ${fileBasenameNoExtension}\" } ] } \u30c7\u30d5\u30a9\u30fc\u30eb\u30c8\u5909\u6570 \u00b6 \\${HOME} - Home directory \\${file} - the current opened file \\${fileBasename} - the current opened file's basename \\${fileBasenameNoExtension} - the current opened file's basename with no file extension \\${workspaceFolder} - the path of the folder opened \\${workspaceFolderBasename} - the name of the folder opened in Sublime without any slashes (/) \\${fileDirname} - the current opened file's dirname \\${fileExtname} - the current opened file's extension \\${YYYYMMDD} - current date \\${YYYYMMDD_HHmm} - current datetime \u30c7\u30d5\u30a9\u30fc\u30eb\u30c8\u30c8\u30ea\u30ac\u30fc \u00b6 Mkdirs - make directory SwitchFolder - switch project folder OpenFile - open file CheckFileExist - check file exist Diff - diff file \u30e6\u30fc\u30b6\u30fc\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 \u00b6 input - Custom Input String select - Select List multiselect - Multiple Select List openFolderDailog - Folder Path Selector singleFileDailog - File Path Selector multiFilesDailog - Mutliple File Paths Selector \u69cb\u6210\u4f8b \u00b6 \u4f8b 1: input \u00b6 echo user input { \"tasks\" : [ { \"label\" : \"hello:echo:user-input\" , \"description\" : \"echo user input\" , \"command\" : \"echo ${input:project_directory}\" } ], \"variables\" : {} } if you want to set the default value, please define the variable: { \"tasks\" : [ { \"label\" : \"hello:echo:user-input\" , \"description\" : \"echo user input\" , \"command\" : \"echo ${input:project_directory}\" } ], \"variables\" : { \"project_directory\" : { \"label\" : \"project directory\" , \"value\" : \"${HOME}/test-project\" } } } \u4f8b 2: select \u00b6 echo user select { \"tasks\" : [ { \"label\" : \"hello:echo:user-select\" , \"description\" : \"echo user select\" , \"command\" : \"echo ${select:dotnet_template}\" } ], \"variables\" : { \"dotnet_template\" : { \"label\" : \"dotnet core template\" , \"value\" : [ \"console\" , \"classlib\" , \"wpf\" , \"wpflib\" , \"wpfcustomcontrollib\" , \"wpfusercontrollib\" , \"winforms\" ] } } } \u4f8b 3: multiselect \u00b6 echo files path, you can use separator to control the result string. { \"tasks\" : [ { \"label\" : \"hello:echo:multiselect\" , \"description\" : \"echo user multiselect\" , \"command\" : \"echo ${multiselect:METADATA}\" } ], \"variables\" : { \"METADATA\" : { \"label\" : \"sfdc metadata\" , \"separator\" : \",\" , \"value\" : [ \"ApexClass\" , \"ApexComponent\" , \"ApexPage\" , \"ApexTestSuite\" , \"ApexTrigger\" ] } } } \u4f8b 4: openFolderDailog \u00b6 echo directory path { \"tasks\" : [ { \"label\" : \"hello:echo:folder-path\" , \"description\" : \"echo directory\" , \"command\" : \"echo ${openFolderDailog:project_directory}\" } ], \"variables\" : {} } \u4f8b 5: singleFileDailog \u00b6 single file dailog, you can use filters to control the file type. { \"tasks\" : [ { \"label\" : \"hello:echo:file-path\" , \"description\" : \"echo single file path\" , \"command\" : \"echo ${singleFileDailog:package_xml}\" } ], \"variables\" : { \"package_xml\" : { \"label\" : \"sfdc package.xml path\" , \"filters\" : { \"package.xml\" : [ \"xml\" ] }, \"value\" : \"./manifest/package.xml\" } } } \u4f8b 6: multiFilesDailog \u00b6 Mutliple File Paths Selector use filters to control the file type. use separator to control the result string. { \"tasks\" : [ { \"label\" : \"hello:echo:files-paths\" , \"description\" : \"echo files paths\" , \"command\" : \"echo ${multiFilesDailog:sfdcsourcesfiles}\" } ], \"variables\" : { \"sfdcsourcesfiles\" : { \"label\" : \"sfdc sources files\" , \"separator\" : \",\" , \"value\" : \"\" } } } \u4f8b 7: run command in wsl \u00b6 change the shellPath, you can run command in wsl/bash/powershell ... or other termial { \"label\" : \"run command in wsl\" , \"termial\" : { \"name\" : \"xycode\" , \"shellPath\" : \"wsl.exe\" }, \"command\" : \"pwd\" } \u4f8b 8: auto formatter and auto runner \u00b6 After you save file in vscode, It will use yapf to format code and run python code automatically. { \"tasks\" : [], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"format python code\" , \"description\" : \"format python code\" , \"filetypes\" : [ \".py\" ], \"inActive\" : false , \"command\" : \"yapf \\\"${file}\\\" --style \\\"google\\\" -i\" }, { \"label\" : \"run python file\" , \"description\" : \"run python file\" , \"filetypes\" : [ \".py\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"python \\\"${file}\\\"\" } ] } \u4f8b 10: user prettier to format source code. \u00b6 use Prettier to pretty code . { \"tasks\" : [], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"pretty code.\" , \"description\" : \"Prettier is an opinionated code formatter.\" , \"filetypes\" : [ \".json\" , \".javascript\" , \".js\" , \".md\" , \".css\" , \".vue\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"prettier --write \\\"${file}\\\" --single-quote=true --end-of-line=lf --arrow-parens=always --tab-width=4\" } ] } \u30b7\u30e7\u30fc\u30c8\u30ad\u30fc \u00b6 \u30b7\u30e7\u30fc\u30c8\u30ad\u30fc: ctrl+shift+i \u62e1\u5f35\u8a2d\u5b9a \u00b6 xycode.maxBuffer : The maxBuffer option specifies the largest number of bytes allowed on stdout or stderr.","title":"xycode\u65e5\u672c\u8a9e"},{"location":"index.ja/#xycode","text":"xycode vscode \u306e\u8efd\u91cf\u30b3\u30de\u30f3\u30c9\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\u3067\u3059. vscode \u62e1\u5f35\u6a5f\u80fd\u3092\u4f5c\u308b\u524d\u306b\u3001 xycode \u3092\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002","title":"xycode"},{"location":"index.ja/#_1","text":"\u62e1\u5f35\u306e\u30b5\u30a4\u30ba\u306f 100k \u672a\u6e80\u3002 \u30b3\u30de\u30f3\u30c9\u3092\u7d71\u5408\u3057\u3066\u3001vscode \u62e1\u5f35\u6a5f\u80fd\u3068\u3057\u3066\u3001vscode \u3067\u5229\u7528\u53ef\u80fd\u3002 Salesforce SFDX \u5c02\u7528\u958b\u767a\u30c4\u30fc\u30eb\u3002 Heroku \u958b\u767a\u3002 Git \u30b3\u30de\u30f3\u30c9\u7d71\u5408\u3002 Docker \u958b\u767a\u3002 prettier \u62e1\u5f35\u3001\u81ea\u52d5\u6575\u306b\u30b3\u30fc\u30c9\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3059\u308b\u3002 Python\u3001Go\u3001Ruby\u3001C\u3001C ++\u3001Dotnet Core\u3001Java \u306a\u3069\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3092\u7d71\u5408\u3002 hexo\u3001jekyll\u3001mkdoc \u306a\u3069\u306e\u30d6\u30ed\u30b0\u3092\u4f5c\u6210\u3002 Wenyan \u53e4\u5178\u4e2d\u56fd\u8a9e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u958b\u767a\u3002 \u4e00\u5ea6\u8a2d\u5b9a\u3057\u305f\u5f8c\u3001\u30b0\u30eb\u30d0\u30fc\u30eb\u518d\u5229\u7528\u53ef\u80fd\u3002","title":"\u6a5f\u80fd"},{"location":"index.ja/#_2","text":"","title":"\u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u65b9\u6cd5"},{"location":"index.ja/#vscode","text":"vscode \u3067 xycode: download config \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3001\u65e2\u5b58\u306e\u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u53ef\u80fd\u3067\u3059\u3002","title":"vscode \u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b"},{"location":"index.ja/#github","text":"github xycode-config \u3000\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001 \u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001\u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u30d5\u30a9\u30eb\u30c0\u3068\u306f\uff1f Linux/Mac \u306e\u5834\u5408 ~/.xycode windows \u306e\u5834\u5408: %USERPROFILE%/.xycode","title":"github \u7d4c\u7531\u3057\u3066\u3001\u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b"},{"location":"index.ja/#_3","text":"","title":"\u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba"},{"location":"index.ja/#_4","text":"\u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u30d5\u30a9\u30eb\u30c0\u306b\u3001json \u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210"},{"location":"index.ja/#_5","text":"{ \"tasks\" : [ { \"label\" : \"label name, required\" , \"description\" : \"description, not required\" , \"command\" : \"your command, required\" , // cwd is not required \"cwd\" : \"path of current working directory\" , // filetypes is not required // \"filetypes\" : [ \".py\" ], // if you not need the command , please set it true // \"inActive\" : false , // show the message in termial, default show in channel. // \"termial\" : { name?: string, shellPath?: string, shellArgs?: string[] | string } ; // before run the command , you can set some check. \"beforeTriggers\" : [ { \"type\" : \"buildin\" , \"fn\" : \"CheckFileExist\" , \"params\" : [ \"${project_directory}/${project_name}\" ] } ], // after ran the command, you can do something. \"afterTriggers\" : [ { \"type\" : \"buildin\" , \"fn\" : \"SwitchFolder\" , \"params\" : [ \"${project_directory}/${project_name}\" ] } ] } ], \"variables\" : { \"apex_template\" : { \"label\" : \"sfdc apex template\" , \"description\" : \"\" , \"value\" : [ \"DefaultApexClass\" , \"ApexException\" , \"ApexUnitTest\" , \"InboundEmailService\" ] }, \"base_metadata\" : { \"label\" : \"default sfdc metadata\" , \"description\" : \"\" , \"value\" : \"ApexClass, ApexPage, ApexComponent, ApexTrigger\" } }, \"onSaveEvents\" : [ { \"label\" : \"compile and run c file\" , \"description\" : \"compile and run c file after save\" , \"filetypes\" : [ \".c\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"gcc -o ${fileBasenameNoExtension} ${file} && ${fileBasenameNoExtension}\" } ] }","title":"\u30b3\u30f3\u30d5\u30a3\u30b0\u30d5\u30a1\u30a4\u30eb\u306e\u69cb\u6210"},{"location":"index.ja/#_6","text":"\\${HOME} - Home directory \\${file} - the current opened file \\${fileBasename} - the current opened file's basename \\${fileBasenameNoExtension} - the current opened file's basename with no file extension \\${workspaceFolder} - the path of the folder opened \\${workspaceFolderBasename} - the name of the folder opened in Sublime without any slashes (/) \\${fileDirname} - the current opened file's dirname \\${fileExtname} - the current opened file's extension \\${YYYYMMDD} - current date \\${YYYYMMDD_HHmm} - current datetime","title":"\u30c7\u30d5\u30a9\u30fc\u30eb\u30c8\u5909\u6570"},{"location":"index.ja/#_7","text":"Mkdirs - make directory SwitchFolder - switch project folder OpenFile - open file CheckFileExist - check file exist Diff - diff file","title":"\u30c7\u30d5\u30a9\u30fc\u30eb\u30c8\u30c8\u30ea\u30ac\u30fc"},{"location":"index.ja/#_8","text":"input - Custom Input String select - Select List multiselect - Multiple Select List openFolderDailog - Folder Path Selector singleFileDailog - File Path Selector multiFilesDailog - Mutliple File Paths Selector","title":"\u30e6\u30fc\u30b6\u30fc\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9"},{"location":"index.ja/#_9","text":"","title":"\u69cb\u6210\u4f8b"},{"location":"index.ja/#1-input","text":"echo user input { \"tasks\" : [ { \"label\" : \"hello:echo:user-input\" , \"description\" : \"echo user input\" , \"command\" : \"echo ${input:project_directory}\" } ], \"variables\" : {} } if you want to set the default value, please define the variable: { \"tasks\" : [ { \"label\" : \"hello:echo:user-input\" , \"description\" : \"echo user input\" , \"command\" : \"echo ${input:project_directory}\" } ], \"variables\" : { \"project_directory\" : { \"label\" : \"project directory\" , \"value\" : \"${HOME}/test-project\" } } }","title":"\u4f8b 1: input"},{"location":"index.ja/#2-select","text":"echo user select { \"tasks\" : [ { \"label\" : \"hello:echo:user-select\" , \"description\" : \"echo user select\" , \"command\" : \"echo ${select:dotnet_template}\" } ], \"variables\" : { \"dotnet_template\" : { \"label\" : \"dotnet core template\" , \"value\" : [ \"console\" , \"classlib\" , \"wpf\" , \"wpflib\" , \"wpfcustomcontrollib\" , \"wpfusercontrollib\" , \"winforms\" ] } } }","title":"\u4f8b 2: select"},{"location":"index.ja/#3-multiselect","text":"echo files path, you can use separator to control the result string. { \"tasks\" : [ { \"label\" : \"hello:echo:multiselect\" , \"description\" : \"echo user multiselect\" , \"command\" : \"echo ${multiselect:METADATA}\" } ], \"variables\" : { \"METADATA\" : { \"label\" : \"sfdc metadata\" , \"separator\" : \",\" , \"value\" : [ \"ApexClass\" , \"ApexComponent\" , \"ApexPage\" , \"ApexTestSuite\" , \"ApexTrigger\" ] } } }","title":"\u4f8b 3: multiselect"},{"location":"index.ja/#4-openfolderdailog","text":"echo directory path { \"tasks\" : [ { \"label\" : \"hello:echo:folder-path\" , \"description\" : \"echo directory\" , \"command\" : \"echo ${openFolderDailog:project_directory}\" } ], \"variables\" : {} }","title":"\u4f8b 4: openFolderDailog"},{"location":"index.ja/#5-singlefiledailog","text":"single file dailog, you can use filters to control the file type. { \"tasks\" : [ { \"label\" : \"hello:echo:file-path\" , \"description\" : \"echo single file path\" , \"command\" : \"echo ${singleFileDailog:package_xml}\" } ], \"variables\" : { \"package_xml\" : { \"label\" : \"sfdc package.xml path\" , \"filters\" : { \"package.xml\" : [ \"xml\" ] }, \"value\" : \"./manifest/package.xml\" } } }","title":"\u4f8b 5: singleFileDailog"},{"location":"index.ja/#6-multifilesdailog","text":"Mutliple File Paths Selector use filters to control the file type. use separator to control the result string. { \"tasks\" : [ { \"label\" : \"hello:echo:files-paths\" , \"description\" : \"echo files paths\" , \"command\" : \"echo ${multiFilesDailog:sfdcsourcesfiles}\" } ], \"variables\" : { \"sfdcsourcesfiles\" : { \"label\" : \"sfdc sources files\" , \"separator\" : \",\" , \"value\" : \"\" } } }","title":"\u4f8b 6: multiFilesDailog"},{"location":"index.ja/#7-run-command-in-wsl","text":"change the shellPath, you can run command in wsl/bash/powershell ... or other termial { \"label\" : \"run command in wsl\" , \"termial\" : { \"name\" : \"xycode\" , \"shellPath\" : \"wsl.exe\" }, \"command\" : \"pwd\" }","title":"\u4f8b 7: run command in wsl"},{"location":"index.ja/#8-auto-formatter-and-auto-runner","text":"After you save file in vscode, It will use yapf to format code and run python code automatically. { \"tasks\" : [], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"format python code\" , \"description\" : \"format python code\" , \"filetypes\" : [ \".py\" ], \"inActive\" : false , \"command\" : \"yapf \\\"${file}\\\" --style \\\"google\\\" -i\" }, { \"label\" : \"run python file\" , \"description\" : \"run python file\" , \"filetypes\" : [ \".py\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"python \\\"${file}\\\"\" } ] }","title":"\u4f8b 8: auto formatter and auto runner"},{"location":"index.ja/#10-user-prettier-to-format-source-code","text":"use Prettier to pretty code . { \"tasks\" : [], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"pretty code.\" , \"description\" : \"Prettier is an opinionated code formatter.\" , \"filetypes\" : [ \".json\" , \".javascript\" , \".js\" , \".md\" , \".css\" , \".vue\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"prettier --write \\\"${file}\\\" --single-quote=true --end-of-line=lf --arrow-parens=always --tab-width=4\" } ] }","title":"\u4f8b 10: user prettier to format source code."},{"location":"index.ja/#_10","text":"\u30b7\u30e7\u30fc\u30c8\u30ad\u30fc: ctrl+shift+i","title":"\u30b7\u30e7\u30fc\u30c8\u30ad\u30fc"},{"location":"index.ja/#_11","text":"xycode.maxBuffer : The maxBuffer option specifies the largest number of bytes allowed on stdout or stderr.","title":"\u62e1\u5f35\u8a2d\u5b9a"},{"location":"index.zh-CN/","text":"xycode \u00b6 xycode \u662f vscode \u7684\u8f7b\u91cf\u7ea7\u547d\u4ee4\u6267\u884c\u5668. \u5982\u679c\u60a8\u60f3\u6784\u5efa\u4e00\u4e2a vscode \u6269\u5c55\u7a0b\u5e8f\uff0c\u4e5f\u8bb8\u60a8\u53ef \u200b\u200b \u4ee5\u5148\u4f7f\u7528 xycode \u3002 \u7279\u5f81 \u00b6 [x] \u5c0f\u4e8e 100k. [x] \u5b9a\u4e49\u60a8\u7684 vscode \u6269\u5c55\u3002 [x] \u53ea\u9700\u8981\u914d\u7f6e\u4e00\u6b21\uff0c\u662f Vscode \u7684 Task \u6269\u5c55\u3002 [x] Integrated with system command and work with vscode. [x] \u652f\u6301 c \u8bed\u8a00\u7f16\u7a0b. [x] \u652f\u6301 vbs. [x] \u652f\u6301 dotnet core. [x] \u652f\u6301 go language. [x] \u652f\u6301 python. [x] \u652f\u6301 ruby. [x] \u652f\u6301 gradle language. [x] \u652f\u6301 npm/nodejs/express/vue. [x] \u652f\u6301 prettier, format source automatically. [x] \u652f\u6301 Heroku development. [x] \u652f\u6301 git command. [x] \u652f\u6301 sfdx, \u7528\u4e8e Salesforce SFDX \u5f00\u53d1\u7684\u5feb\u901f\u5f00\u53d1\u5de5\u5177\u3002 [x] \u652f\u6301 Wenyan \u6587\u8a00\u6587\u7de8\u7a0b\u8a9e\u8a00. [x] \u652f\u6301\u5199\u535a\u5ba2 hexo/mkdoc blog. [ ] TODO : jekyll . [ ] TODO : Docker development. [ ] TODO : a calculator. \u4e0b\u8f7d\u914d\u7f6e \u00b6 \u5728 vscode \u4e2d\u81ea\u52a8\u4e0b\u8f7d \u00b6 \u6267\u884c xycode: download config \u547d\u4ee4, \u4e0b\u8f7d\u914d\u7f6e. \u624b\u52a8\u4e0b\u8f7d \u00b6 \u4ece github \u4e2d\u4e0b\u8f7d\u914d\u7f6e xycode-config . \u590d\u5236\u5230 Home \u76ee\u5f55( ~/.xycode or %USERPROFILE%/.xycode ) \u81ea\u5b9a\u4e49\u914d\u7f6e \u00b6 \u521b\u5efa json \u6587\u4ef6 \u00b6 \u5728\u4e0b\u9762\u76ee\u5f55\u4e0b\u521b\u5efa\u914d\u7f6e Windows user: %USERPROFILE%/.xycode Linux/Mac user: ~/.xycode json \u6570\u636e\u7ed3\u6784 \u00b6 { \"tasks\" : [ { \"label\" : \"label name, required\" , \"description\" : \"description, not required\" , \"command\" : \"your command, required\" , // cwd is not required \"cwd\" : \"path of current working directory\" , // filetypes is not required // \"filetypes\" : [ \".py\" ], // if you not need the command , please set it true // \"inActive\" : false , // show the message in termial, default show in channel. // \"termial\" : { name?: string, shellPath?: string, shellArgs?: string[] | string } ; // before run the command , you can set some check. \"beforeTriggers\" : [ { \"type\" : \"buildin\" , \"fn\" : \"CheckFileExist\" , \"params\" : [ \"${project_directory}/${project_name}\" ] } ], // after ran the command, you can do something. \"afterTriggers\" : [ { \"type\" : \"buildin\" , \"fn\" : \"SwitchFolder\" , \"params\" : [ \"${project_directory}/${project_name}\" ] } ] } ], \"variables\" : { \"apex_template\" : { \"label\" : \"sfdc apex template\" , \"description\" : \"\" , \"value\" : [ \"DefaultApexClass\" , \"ApexException\" , \"ApexUnitTest\" , \"InboundEmailService\" ] }, \"base_metadata\" : { \"label\" : \"default sfdc metadata\" , \"description\" : \"\" , \"value\" : \"ApexClass, ApexPage, ApexComponent, ApexTrigger\" } } } \u9884\u5b9a\u4e49\u53d8\u91cf \u00b6 \\${HOME} - Home directory \\${file} - the current opened file \\${fileBasename} - the current opened file's basename \\${fileBasenameNoExtension} - the current opened file's basename with no file extension \\${workspaceFolder} - the path of the folder opened \\${workspaceFolderBasename} - the name of the folder opened in Sublime without any slashes (/) \\${fileDirname} - the current opened file's dirname \\${fileExtname} - the current opened file's extension \\${YYYYMMDD} - current date \\${YYYYMMDD_HHmm} - current datetime \u9884\u5b9a\u4e49\u89e6\u53d1\u5668 \u00b6 Mkdirs - make directory SwitchFolder - switch project folder OpenFile - open file CheckFileExist - check file exist Diff - diff file \u7528\u6237\u4ea4\u4e92\u547d\u4ee4 \u00b6 input - Custom Input String select - Select List multiselect - Multiple Select List openFolderDailog - Folder Path Selector singleFileDailog - File Path Selector multiFilesDailog - Mutliple File Paths Selector \u914d\u7f6e\u4f8b\u5b50 \u00b6 \u4f8b\u5b50 1: input \u00b6 echo user input { \"tasks\" : [ { \"label\" : \"hello:echo:user-input\" , \"description\" : \"echo user input\" , \"command\" : \"echo ${input:project_directory}\" } ], \"variables\" : {} } if you want to set the default value, please define the variable: { \"tasks\" : [ { \"label\" : \"hello:echo:user-input\" , \"description\" : \"echo user input\" , \"command\" : \"echo ${input:project_directory}\" } ], \"variables\" : { \"project_directory\" : { \"label\" : \"project directory\" , \"value\" : \"${HOME}/test-project\" } } } \u4f8b\u5b50 2: select \u00b6 echo user select { \"tasks\" : [ { \"label\" : \"hello:echo:user-select\" , \"description\" : \"echo user select\" , \"command\" : \"echo ${select:dotnet_template}\" } ], \"variables\" : { \"dotnet_template\" : { \"label\" : \"dotnet core template\" , \"value\" : [ \"console\" , \"classlib\" , \"wpf\" , \"wpflib\" , \"wpfcustomcontrollib\" , \"wpfusercontrollib\" , \"winforms\" ] } } } \u4f8b\u5b50 3: multiselect \u00b6 echo files path, you can use separator to control the result string. { \"tasks\" : [ { \"label\" : \"hello:echo:multiselect\" , \"description\" : \"echo user multiselect\" , \"command\" : \"echo ${multiselect:METADATA}\" } ], \"variables\" : { \"METADATA\" : { \"label\" : \"sfdc metadata\" , \"separator\" : \",\" , \"value\" : [ \"ApexClass\" , \"ApexComponent\" , \"ApexPage\" , \"ApexTestSuite\" , \"ApexTrigger\" ] } } } \u4f8b\u5b50 4: openFolderDailog \u00b6 echo directory path { \"tasks\" : [ { \"label\" : \"hello:echo:folder-path\" , \"description\" : \"echo directory\" , \"command\" : \"echo ${openFolderDailog:project_directory}\" } ], \"variables\" : {} } \u4f8b\u5b50 5: singleFileDailog \u00b6 single file dailog, you can use filters to control the file type. { \"tasks\" : [ { \"label\" : \"hello:echo:file-path\" , \"description\" : \"echo single file path\" , \"command\" : \"echo ${singleFileDailog:package_xml}\" } ], \"variables\" : { \"package_xml\" : { \"label\" : \"sfdc package.xml path\" , \"filters\" : { \"package.xml\" : [ \"xml\" ] }, \"value\" : \"./manifest/package.xml\" } } } \u4f8b\u5b50 6: multiFilesDailog \u00b6 Mutliple File Paths Selector use filters to control the file type. use separator to control the result string. { \"tasks\" : [ { \"label\" : \"hello:echo:files-paths\" , \"description\" : \"echo files paths\" , \"command\" : \"echo ${multiFilesDailog:sfdcsourcesfiles}\" } ], \"variables\" : { \"sfdcsourcesfiles\" : { \"label\" : \"sfdc sources files\" , \"separator\" : \",\" , \"value\" : \"\" } } } \u4f8b\u5b50 7: run command in wsl \u00b6 change the shellPath, you can run command in wsl/bash/powershell ... or other termial { \"label\" : \"run command in wsl\" , \"termial\" : { \"name\" : \"xycode\" , \"shellPath\" : \"wsl.exe\" }, \"command\" : \"pwd\" } \u4f8b\u5b50 8: auto formatter and auto runner \u00b6 After you save file in vscode, It will use yapf to format code and run python code automatically. { \"tasks\" : [], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"format python code\" , \"description\" : \"format python code\" , \"filetypes\" : [ \".py\" ], \"inActive\" : false , \"command\" : \"yapf \\\"${file}\\\" --style \\\"google\\\" -i\" }, { \"label\" : \"run python file\" , \"description\" : \"run python file\" , \"filetypes\" : [ \".py\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"python \\\"${file}\\\"\" } ] } \u4f8b\u5b50 10: user prettier to format source code. \u00b6 use Prettier to pretty code . { \"tasks\" : [], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"pretty code.\" , \"description\" : \"Prettier is an opinionated code formatter.\" , \"filetypes\" : [ \".json\" , \".javascript\" , \".js\" , \".md\" , \".css\" , \".vue\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"prettier --write \\\"${file}\\\" --single-quote=true --end-of-line=lf --arrow-parens=always --tab-width=4\" } ] } \u5feb\u6377\u952e \u00b6 \u5feb\u6377\u952e: ctrl+shift+i \u6269\u5c55\u7a0b\u5e8f\u8bbe\u7f6e \u00b6 xycode.maxBuffer : The maxBuffer option specifies the largest number of bytes allowed on stdout or stderr.","title":"xycode\u4e2d\u6587"},{"location":"index.zh-CN/#xycode","text":"xycode \u662f vscode \u7684\u8f7b\u91cf\u7ea7\u547d\u4ee4\u6267\u884c\u5668. \u5982\u679c\u60a8\u60f3\u6784\u5efa\u4e00\u4e2a vscode \u6269\u5c55\u7a0b\u5e8f\uff0c\u4e5f\u8bb8\u60a8\u53ef \u200b\u200b \u4ee5\u5148\u4f7f\u7528 xycode \u3002","title":"xycode"},{"location":"index.zh-CN/#_1","text":"[x] \u5c0f\u4e8e 100k. [x] \u5b9a\u4e49\u60a8\u7684 vscode \u6269\u5c55\u3002 [x] \u53ea\u9700\u8981\u914d\u7f6e\u4e00\u6b21\uff0c\u662f Vscode \u7684 Task \u6269\u5c55\u3002 [x] Integrated with system command and work with vscode. [x] \u652f\u6301 c \u8bed\u8a00\u7f16\u7a0b. [x] \u652f\u6301 vbs. [x] \u652f\u6301 dotnet core. [x] \u652f\u6301 go language. [x] \u652f\u6301 python. [x] \u652f\u6301 ruby. [x] \u652f\u6301 gradle language. [x] \u652f\u6301 npm/nodejs/express/vue. [x] \u652f\u6301 prettier, format source automatically. [x] \u652f\u6301 Heroku development. [x] \u652f\u6301 git command. [x] \u652f\u6301 sfdx, \u7528\u4e8e Salesforce SFDX \u5f00\u53d1\u7684\u5feb\u901f\u5f00\u53d1\u5de5\u5177\u3002 [x] \u652f\u6301 Wenyan \u6587\u8a00\u6587\u7de8\u7a0b\u8a9e\u8a00. [x] \u652f\u6301\u5199\u535a\u5ba2 hexo/mkdoc blog. [ ] TODO : jekyll . [ ] TODO : Docker development. [ ] TODO : a calculator.","title":"\u7279\u5f81"},{"location":"index.zh-CN/#_2","text":"","title":"\u4e0b\u8f7d\u914d\u7f6e"},{"location":"index.zh-CN/#vscode","text":"\u6267\u884c xycode: download config \u547d\u4ee4, \u4e0b\u8f7d\u914d\u7f6e.","title":"\u5728 vscode \u4e2d\u81ea\u52a8\u4e0b\u8f7d"},{"location":"index.zh-CN/#_3","text":"\u4ece github \u4e2d\u4e0b\u8f7d\u914d\u7f6e xycode-config . \u590d\u5236\u5230 Home \u76ee\u5f55( ~/.xycode or %USERPROFILE%/.xycode )","title":"\u624b\u52a8\u4e0b\u8f7d"},{"location":"index.zh-CN/#_4","text":"","title":"\u81ea\u5b9a\u4e49\u914d\u7f6e"},{"location":"index.zh-CN/#json","text":"\u5728\u4e0b\u9762\u76ee\u5f55\u4e0b\u521b\u5efa\u914d\u7f6e Windows user: %USERPROFILE%/.xycode Linux/Mac user: ~/.xycode","title":"\u521b\u5efa json \u6587\u4ef6"},{"location":"index.zh-CN/#json_1","text":"{ \"tasks\" : [ { \"label\" : \"label name, required\" , \"description\" : \"description, not required\" , \"command\" : \"your command, required\" , // cwd is not required \"cwd\" : \"path of current working directory\" , // filetypes is not required // \"filetypes\" : [ \".py\" ], // if you not need the command , please set it true // \"inActive\" : false , // show the message in termial, default show in channel. // \"termial\" : { name?: string, shellPath?: string, shellArgs?: string[] | string } ; // before run the command , you can set some check. \"beforeTriggers\" : [ { \"type\" : \"buildin\" , \"fn\" : \"CheckFileExist\" , \"params\" : [ \"${project_directory}/${project_name}\" ] } ], // after ran the command, you can do something. \"afterTriggers\" : [ { \"type\" : \"buildin\" , \"fn\" : \"SwitchFolder\" , \"params\" : [ \"${project_directory}/${project_name}\" ] } ] } ], \"variables\" : { \"apex_template\" : { \"label\" : \"sfdc apex template\" , \"description\" : \"\" , \"value\" : [ \"DefaultApexClass\" , \"ApexException\" , \"ApexUnitTest\" , \"InboundEmailService\" ] }, \"base_metadata\" : { \"label\" : \"default sfdc metadata\" , \"description\" : \"\" , \"value\" : \"ApexClass, ApexPage, ApexComponent, ApexTrigger\" } } }","title":"json \u6570\u636e\u7ed3\u6784"},{"location":"index.zh-CN/#_5","text":"\\${HOME} - Home directory \\${file} - the current opened file \\${fileBasename} - the current opened file's basename \\${fileBasenameNoExtension} - the current opened file's basename with no file extension \\${workspaceFolder} - the path of the folder opened \\${workspaceFolderBasename} - the name of the folder opened in Sublime without any slashes (/) \\${fileDirname} - the current opened file's dirname \\${fileExtname} - the current opened file's extension \\${YYYYMMDD} - current date \\${YYYYMMDD_HHmm} - current datetime","title":"\u9884\u5b9a\u4e49\u53d8\u91cf"},{"location":"index.zh-CN/#_6","text":"Mkdirs - make directory SwitchFolder - switch project folder OpenFile - open file CheckFileExist - check file exist Diff - diff file","title":"\u9884\u5b9a\u4e49\u89e6\u53d1\u5668"},{"location":"index.zh-CN/#_7","text":"input - Custom Input String select - Select List multiselect - Multiple Select List openFolderDailog - Folder Path Selector singleFileDailog - File Path Selector multiFilesDailog - Mutliple File Paths Selector","title":"\u7528\u6237\u4ea4\u4e92\u547d\u4ee4"},{"location":"index.zh-CN/#_8","text":"","title":"\u914d\u7f6e\u4f8b\u5b50"},{"location":"index.zh-CN/#1-input","text":"echo user input { \"tasks\" : [ { \"label\" : \"hello:echo:user-input\" , \"description\" : \"echo user input\" , \"command\" : \"echo ${input:project_directory}\" } ], \"variables\" : {} } if you want to set the default value, please define the variable: { \"tasks\" : [ { \"label\" : \"hello:echo:user-input\" , \"description\" : \"echo user input\" , \"command\" : \"echo ${input:project_directory}\" } ], \"variables\" : { \"project_directory\" : { \"label\" : \"project directory\" , \"value\" : \"${HOME}/test-project\" } } }","title":"\u4f8b\u5b50 1: input"},{"location":"index.zh-CN/#2-select","text":"echo user select { \"tasks\" : [ { \"label\" : \"hello:echo:user-select\" , \"description\" : \"echo user select\" , \"command\" : \"echo ${select:dotnet_template}\" } ], \"variables\" : { \"dotnet_template\" : { \"label\" : \"dotnet core template\" , \"value\" : [ \"console\" , \"classlib\" , \"wpf\" , \"wpflib\" , \"wpfcustomcontrollib\" , \"wpfusercontrollib\" , \"winforms\" ] } } }","title":"\u4f8b\u5b50 2: select"},{"location":"index.zh-CN/#3-multiselect","text":"echo files path, you can use separator to control the result string. { \"tasks\" : [ { \"label\" : \"hello:echo:multiselect\" , \"description\" : \"echo user multiselect\" , \"command\" : \"echo ${multiselect:METADATA}\" } ], \"variables\" : { \"METADATA\" : { \"label\" : \"sfdc metadata\" , \"separator\" : \",\" , \"value\" : [ \"ApexClass\" , \"ApexComponent\" , \"ApexPage\" , \"ApexTestSuite\" , \"ApexTrigger\" ] } } }","title":"\u4f8b\u5b50 3: multiselect"},{"location":"index.zh-CN/#4-openfolderdailog","text":"echo directory path { \"tasks\" : [ { \"label\" : \"hello:echo:folder-path\" , \"description\" : \"echo directory\" , \"command\" : \"echo ${openFolderDailog:project_directory}\" } ], \"variables\" : {} }","title":"\u4f8b\u5b50 4: openFolderDailog"},{"location":"index.zh-CN/#5-singlefiledailog","text":"single file dailog, you can use filters to control the file type. { \"tasks\" : [ { \"label\" : \"hello:echo:file-path\" , \"description\" : \"echo single file path\" , \"command\" : \"echo ${singleFileDailog:package_xml}\" } ], \"variables\" : { \"package_xml\" : { \"label\" : \"sfdc package.xml path\" , \"filters\" : { \"package.xml\" : [ \"xml\" ] }, \"value\" : \"./manifest/package.xml\" } } }","title":"\u4f8b\u5b50 5: singleFileDailog"},{"location":"index.zh-CN/#6-multifilesdailog","text":"Mutliple File Paths Selector use filters to control the file type. use separator to control the result string. { \"tasks\" : [ { \"label\" : \"hello:echo:files-paths\" , \"description\" : \"echo files paths\" , \"command\" : \"echo ${multiFilesDailog:sfdcsourcesfiles}\" } ], \"variables\" : { \"sfdcsourcesfiles\" : { \"label\" : \"sfdc sources files\" , \"separator\" : \",\" , \"value\" : \"\" } } }","title":"\u4f8b\u5b50 6: multiFilesDailog"},{"location":"index.zh-CN/#7-run-command-in-wsl","text":"change the shellPath, you can run command in wsl/bash/powershell ... or other termial { \"label\" : \"run command in wsl\" , \"termial\" : { \"name\" : \"xycode\" , \"shellPath\" : \"wsl.exe\" }, \"command\" : \"pwd\" }","title":"\u4f8b\u5b50 7: run command in wsl"},{"location":"index.zh-CN/#8-auto-formatter-and-auto-runner","text":"After you save file in vscode, It will use yapf to format code and run python code automatically. { \"tasks\" : [], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"format python code\" , \"description\" : \"format python code\" , \"filetypes\" : [ \".py\" ], \"inActive\" : false , \"command\" : \"yapf \\\"${file}\\\" --style \\\"google\\\" -i\" }, { \"label\" : \"run python file\" , \"description\" : \"run python file\" , \"filetypes\" : [ \".py\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"python \\\"${file}\\\"\" } ] }","title":"\u4f8b\u5b50 8: auto formatter and auto runner"},{"location":"index.zh-CN/#10-user-prettier-to-format-source-code","text":"use Prettier to pretty code . { \"tasks\" : [], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"pretty code.\" , \"description\" : \"Prettier is an opinionated code formatter.\" , \"filetypes\" : [ \".json\" , \".javascript\" , \".js\" , \".md\" , \".css\" , \".vue\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"prettier --write \\\"${file}\\\" --single-quote=true --end-of-line=lf --arrow-parens=always --tab-width=4\" } ] }","title":"\u4f8b\u5b50 10: user prettier to format source code."},{"location":"index.zh-CN/#_9","text":"\u5feb\u6377\u952e: ctrl+shift+i","title":"\u5feb\u6377\u952e"},{"location":"index.zh-CN/#_10","text":"xycode.maxBuffer : The maxBuffer option specifies the largest number of bytes allowed on stdout or stderr.","title":"\u6269\u5c55\u7a0b\u5e8f\u8bbe\u7f6e"},{"location":"usage/c-program/","text":"Agenda \u00b6 Use xycode and Gcc to develope c program. config \u00b6 { \"tasks\" : [ { \"label\" : \"make:version\" , \"command\" : \"make -v\" }, { \"label\" : \"make:clean\" , \"command\" : \"make clean\" }, { \"label\" : \"make:hello\" , \"command\" : \"make hello\" }, { \"label\" : \"make:all\" , \"command\" : \"make all\" }, { \"label\" : \"make:target\" , \"command\" : \"make ${input:make_target}\" }, { \"label\" : \"gcc:compile\" , \"cwd\" : \"${fileDirname}\" , \"command\" : \"gcc -o ${fileBasenameNoExtension} ${file}\" }, { \"label\" : \"gcc:compile_and_run\" , \"cwd\" : \"${fileDirname}\" , \"command\" : \"gcc -o ${fileBasenameNoExtension} ${file} && ${fileBasenameNoExtension}\" } ], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"compile and run c file\" , \"description\" : \"compile and run c file after save\" , \"filetypes\" : [ \".c\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"gcc -o ${fileBasenameNoExtension} ${file} && ${fileBasenameNoExtension}\" } ] } write hello world \u00b6 #include <stdio.h> int main ( int argc , char * args []) { printf ( \"Hello, world! \\n \" ); return 0 ; } After save the file, you can see the result.","title":"C Program in xycode"},{"location":"usage/c-program/#agenda","text":"Use xycode and Gcc to develope c program.","title":"Agenda"},{"location":"usage/c-program/#config","text":"{ \"tasks\" : [ { \"label\" : \"make:version\" , \"command\" : \"make -v\" }, { \"label\" : \"make:clean\" , \"command\" : \"make clean\" }, { \"label\" : \"make:hello\" , \"command\" : \"make hello\" }, { \"label\" : \"make:all\" , \"command\" : \"make all\" }, { \"label\" : \"make:target\" , \"command\" : \"make ${input:make_target}\" }, { \"label\" : \"gcc:compile\" , \"cwd\" : \"${fileDirname}\" , \"command\" : \"gcc -o ${fileBasenameNoExtension} ${file}\" }, { \"label\" : \"gcc:compile_and_run\" , \"cwd\" : \"${fileDirname}\" , \"command\" : \"gcc -o ${fileBasenameNoExtension} ${file} && ${fileBasenameNoExtension}\" } ], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"compile and run c file\" , \"description\" : \"compile and run c file after save\" , \"filetypes\" : [ \".c\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"gcc -o ${fileBasenameNoExtension} ${file} && ${fileBasenameNoExtension}\" } ] }","title":"config"},{"location":"usage/c-program/#write-hello-world","text":"#include <stdio.h> int main ( int argc , char * args []) { printf ( \"Hello, world! \\n \" ); return 0 ; } After save the file, you can see the result.","title":"write hello world"},{"location":"usage/define-console/","text":"Define console \u00b6 Define console in xycode . config \u00b6 { \"tasks\" : [ { \"label\" : \"console: WSL\" , \"description\" : \"open WSL\" , \"notShowProcess\" : true , \"command\" : \"cd ${workspaceFolder} && start wsl\" }, { \"label\" : \"console: cmd\" , \"description\" : \"open cmd\" , \"notShowProcess\" : true , \"command\" : \"start cmd\" }, { \"label\" : \"console: Cmder\" , \"description\" : \"open Cmder\" , \"notShowProcess\" : true , \"command\" : \"Cmder.exe /single ${workspaceFolder}\" }, { \"label\" : \"console: bash\" , \"description\" : \"open bash\" , \"notShowProcess\" : true , \"command\" : \"cd ${workspaceFolder} && start bash\" }, { \"label\" : \"console: mintty.exe\" , \"description\" : \"open mintty.exe\" , \"notShowProcess\" : true , \"command\" : \"start /b mintty.exe /bin/bash --login\" }, { \"label\" : \"windows: explorer\" , \"description\" : \"open explorer\" , \"notShowProcess\" : true , \"command\" : \"start explorer ${workspaceFolder}\" }, { \"label\" : \"windows: open home directory\" , \"description\" : \"open home directory\" , \"notShowProcess\" : true , \"command\" : \"start explorer ${HOME}\" }, { \"label\" : \"sublime\" , \"description\" : \"open sublime\" , \"notShowProcess\" : true , \"command\" : \"\\\"C:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\\\" \\\"${openFolderDailog:project_directory}\\\"\" }, { \"label\" : \"sublime:open this workspace\" , \"description\" : \"open sublime\" , \"notShowProcess\" : true , \"command\" : \"\\\"C:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\\\" \\\"${workspaceFolder}\\\"\" } ], \"variables\" : { \"myproject_directory\" : { \"label\" : \"apex code snippt file\" , \"value\" : [ \"${HOME}/.xycode\" ] } } } define console \u00b6","title":"Define console"},{"location":"usage/define-console/#define-console","text":"Define console in xycode .","title":"Define console"},{"location":"usage/define-console/#config","text":"{ \"tasks\" : [ { \"label\" : \"console: WSL\" , \"description\" : \"open WSL\" , \"notShowProcess\" : true , \"command\" : \"cd ${workspaceFolder} && start wsl\" }, { \"label\" : \"console: cmd\" , \"description\" : \"open cmd\" , \"notShowProcess\" : true , \"command\" : \"start cmd\" }, { \"label\" : \"console: Cmder\" , \"description\" : \"open Cmder\" , \"notShowProcess\" : true , \"command\" : \"Cmder.exe /single ${workspaceFolder}\" }, { \"label\" : \"console: bash\" , \"description\" : \"open bash\" , \"notShowProcess\" : true , \"command\" : \"cd ${workspaceFolder} && start bash\" }, { \"label\" : \"console: mintty.exe\" , \"description\" : \"open mintty.exe\" , \"notShowProcess\" : true , \"command\" : \"start /b mintty.exe /bin/bash --login\" }, { \"label\" : \"windows: explorer\" , \"description\" : \"open explorer\" , \"notShowProcess\" : true , \"command\" : \"start explorer ${workspaceFolder}\" }, { \"label\" : \"windows: open home directory\" , \"description\" : \"open home directory\" , \"notShowProcess\" : true , \"command\" : \"start explorer ${HOME}\" }, { \"label\" : \"sublime\" , \"description\" : \"open sublime\" , \"notShowProcess\" : true , \"command\" : \"\\\"C:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\\\" \\\"${openFolderDailog:project_directory}\\\"\" }, { \"label\" : \"sublime:open this workspace\" , \"description\" : \"open sublime\" , \"notShowProcess\" : true , \"command\" : \"\\\"C:\\\\Program Files\\\\Sublime Text 3\\\\sublime_text.exe\\\" \\\"${workspaceFolder}\\\"\" } ], \"variables\" : { \"myproject_directory\" : { \"label\" : \"apex code snippt file\" , \"value\" : [ \"${HOME}/.xycode\" ] } } }","title":"config"},{"location":"usage/define-console/#define-console_1","text":"","title":"define console"},{"location":"usage/docker-express/","text":"xycode + docker + express \u00b6 config setup \u00b6 download dockerfile curl -O https://raw.githubusercontent.com/exiahuang/xycode-config/master/docker/express/Dockerfile curl -O https://raw.githubusercontent.com/exiahuang/xycode-config/master/docker/express/docker-compose.yml download xycode config for docker-express cd ~/.xycode && curl -O https://raw.githubusercontent.com/exiahuang/xycode-config/master/linux/xycode.docker-express.json start to develope express in docker \u00b6 tips \u00b6 add docker to your json file in ~/.xycode , then each task in this json config file will run in docker container. { \"tasks\" : [ yourtask... ], \"variables\" : { \"docker_image_name\" : { \"label\" : \"docker images name\" , \"value\" : \"node\" } }, \"docker\" : { \"dockerContainer\" : \"${lowercaseWorkspaceName}_node_1\" , \"dockerAppRoot\" : \"/app/\" } } change ~/.xycode/xycode.docker-express.json config file, define your command.","title":"xycode + docker + express"},{"location":"usage/docker-express/#xycode-docker-express","text":"","title":"xycode + docker + express"},{"location":"usage/docker-express/#config-setup","text":"download dockerfile curl -O https://raw.githubusercontent.com/exiahuang/xycode-config/master/docker/express/Dockerfile curl -O https://raw.githubusercontent.com/exiahuang/xycode-config/master/docker/express/docker-compose.yml download xycode config for docker-express cd ~/.xycode && curl -O https://raw.githubusercontent.com/exiahuang/xycode-config/master/linux/xycode.docker-express.json","title":"config setup"},{"location":"usage/docker-express/#start-to-develope-express-in-docker","text":"","title":"start to develope express in docker"},{"location":"usage/docker-express/#tips","text":"add docker to your json file in ~/.xycode , then each task in this json config file will run in docker container. { \"tasks\" : [ yourtask... ], \"variables\" : { \"docker_image_name\" : { \"label\" : \"docker images name\" , \"value\" : \"node\" } }, \"docker\" : { \"dockerContainer\" : \"${lowercaseWorkspaceName}_node_1\" , \"dockerAppRoot\" : \"/app/\" } } change ~/.xycode/xycode.docker-express.json config file, define your command.","title":"tips"},{"location":"usage/docker-flask/","text":"xycode + docker + flask \u00b6 config setup \u00b6 download dockerfile curl -O https://raw.githubusercontent.com/exiahuang/xycode-config/master/docker/flask/Dockerfile curl -O https://raw.githubusercontent.com/exiahuang/xycode-config/master/docker/flask/docker-compose.yml download xycode config for docker-flask cd ~/.xycode && curl -O https://raw.githubusercontent.com/exiahuang/xycode-config/master/linux/xycode.docker-flask.json start to develope flask in docker \u00b6 tips \u00b6 add docker to your json file in ~/.xycode , then each task in this json config file will run in docker container. { \"tasks\" : [ yourtask... ], \"variables\" : { \"docker_image_name\" : { \"label\" : \"docker images name\" , \"value\" : \"flask\" } }, \"docker\" : { \"dockerContainer\" : \"${lowercaseWorkspaceName}_flask_1\" , \"dockerAppRoot\" : \"/app/\" } } change ~/.xycode/xycode.docker-flask.json config file, define your command.","title":"xycode + docker + flask"},{"location":"usage/docker-flask/#xycode-docker-flask","text":"","title":"xycode + docker + flask"},{"location":"usage/docker-flask/#config-setup","text":"download dockerfile curl -O https://raw.githubusercontent.com/exiahuang/xycode-config/master/docker/flask/Dockerfile curl -O https://raw.githubusercontent.com/exiahuang/xycode-config/master/docker/flask/docker-compose.yml download xycode config for docker-flask cd ~/.xycode && curl -O https://raw.githubusercontent.com/exiahuang/xycode-config/master/linux/xycode.docker-flask.json","title":"config setup"},{"location":"usage/docker-flask/#start-to-develope-flask-in-docker","text":"","title":"start to develope flask in docker"},{"location":"usage/docker-flask/#tips","text":"add docker to your json file in ~/.xycode , then each task in this json config file will run in docker container. { \"tasks\" : [ yourtask... ], \"variables\" : { \"docker_image_name\" : { \"label\" : \"docker images name\" , \"value\" : \"flask\" } }, \"docker\" : { \"dockerContainer\" : \"${lowercaseWorkspaceName}_flask_1\" , \"dockerAppRoot\" : \"/app/\" } } change ~/.xycode/xycode.docker-flask.json config file, define your command.","title":"tips"},{"location":"usage/docker-jekyll/","text":"xycode + docker + jekyll \u00b6 requirement \u00b6 docker vscode xycode config setup \u00b6 download xycode config for docker-jekyll cd ~/.xycode && curl -O https://raw.githubusercontent.com/exiahuang/xycode-config/master/linux/xycode.docker-jekyll.json start to develope jekyll in docker \u00b6 new a jekyll project : use docker:jekyll:new:project create a docker container : use docker:jekyll:create container open jekyll server : use docker:jekyll:serve , open http://localhost:4000/ if you want to use commmand below, please install jekyll/jekyll-compose docker:jekyll:new:page docker:jekyll:new:post docker:jekyll:new:draft Add this line to your application's Gemfile: gem 'jekyll-compose', group: [:jekyll_plugins] And then execute: \\$ bundle New Project Open serve change ~/.xycode/xycode.docker-jekyll.json config file, define your command.","title":"xycode + docker + jekyll"},{"location":"usage/docker-jekyll/#xycode-docker-jekyll","text":"","title":"xycode + docker + jekyll"},{"location":"usage/docker-jekyll/#requirement","text":"docker vscode xycode","title":"requirement"},{"location":"usage/docker-jekyll/#config-setup","text":"download xycode config for docker-jekyll cd ~/.xycode && curl -O https://raw.githubusercontent.com/exiahuang/xycode-config/master/linux/xycode.docker-jekyll.json","title":"config setup"},{"location":"usage/docker-jekyll/#start-to-develope-jekyll-in-docker","text":"new a jekyll project : use docker:jekyll:new:project create a docker container : use docker:jekyll:create container open jekyll server : use docker:jekyll:serve , open http://localhost:4000/ if you want to use commmand below, please install jekyll/jekyll-compose docker:jekyll:new:page docker:jekyll:new:post docker:jekyll:new:draft Add this line to your application's Gemfile: gem 'jekyll-compose', group: [:jekyll_plugins] And then execute: \\$ bundle New Project Open serve change ~/.xycode/xycode.docker-jekyll.json config file, define your command.","title":"start to develope jekyll in docker"},{"location":"usage/docker/","text":"use xycode and docker \u00b6 xycode + docker + express xycode + docker + flask xycode + docker + jekyll","title":"use xycode and docker"},{"location":"usage/docker/#use-xycode-and-docker","text":"xycode + docker + express xycode + docker + flask xycode + docker + jekyll","title":"use xycode and docker"},{"location":"usage/nodejs/","text":"Agenda \u00b6 Use xycode and nodejs. config \u00b6 { \"tasks\" : [ { \"label\" : \"node:run\" , \"description\" : \"run node file\" , \"cwd\" : \"${fileDirname}\" , \"command\" : \"node \\\"${file}\\\"\" }, { \"label\" : \"node:version\" , \"description\" : \"print node version\" , \"command\" : \"node -v\" } ], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"run js file\" , \"description\" : \"run javascript\" , \"filetypes\" : [ \".js\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"node \\\"${file}\\\"\" } ] } write hello world \u00b6 console . log ( 'hello world, nodejs' ); After save the file, you can see the result.","title":"Nodejs in xycode"},{"location":"usage/nodejs/#agenda","text":"Use xycode and nodejs.","title":"Agenda"},{"location":"usage/nodejs/#config","text":"{ \"tasks\" : [ { \"label\" : \"node:run\" , \"description\" : \"run node file\" , \"cwd\" : \"${fileDirname}\" , \"command\" : \"node \\\"${file}\\\"\" }, { \"label\" : \"node:version\" , \"description\" : \"print node version\" , \"command\" : \"node -v\" } ], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"run js file\" , \"description\" : \"run javascript\" , \"filetypes\" : [ \".js\" ], \"inActive\" : false , \"cwd\" : \"${fileDirname}\" , \"command\" : \"node \\\"${file}\\\"\" } ] }","title":"config"},{"location":"usage/nodejs/#write-hello-world","text":"console . log ( 'hello world, nodejs' ); After save the file, you can see the result.","title":"write hello world"},{"location":"usage/python/","text":"Agenda \u00b6 Use xycode and python. config \u00b6 { \"tasks\" : [ { \"label\" : \"python:run\" , \"description\" : \"run python file\" , \"cwd\" : \"${fileDirname}\" , \"command\" : \"python \\\"${file}\\\"\" }, { \"label\" : \"python:version\" , \"description\" : \"print python version\" , \"command\" : \"python --version\" } ], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"format python code\" , \"description\" : \"format python code\" , \"filetypes\" : [ \".py\" ], \"inActive\" : false , \"command\" : \"yapf \\\"${file}\\\" --style \\\"google\\\" -i\" }, { \"label\" : \"run python file\" , \"description\" : \"run python file\" , \"filetypes\" : [ \".py\" ], \"inActive\" : true , \"cwd\" : \"${fileDirname}\" , \"command\" : \"python \\\"${file}\\\"\" } ] } please install yapf if you want to auto format python code. write hello world \u00b6 print ( 'hello world, python' ); After save the file, you can see the result.","title":"python in xycode"},{"location":"usage/python/#agenda","text":"Use xycode and python.","title":"Agenda"},{"location":"usage/python/#config","text":"{ \"tasks\" : [ { \"label\" : \"python:run\" , \"description\" : \"run python file\" , \"cwd\" : \"${fileDirname}\" , \"command\" : \"python \\\"${file}\\\"\" }, { \"label\" : \"python:version\" , \"description\" : \"print python version\" , \"command\" : \"python --version\" } ], \"variables\" : {}, \"onSaveEvents\" : [ { \"label\" : \"format python code\" , \"description\" : \"format python code\" , \"filetypes\" : [ \".py\" ], \"inActive\" : false , \"command\" : \"yapf \\\"${file}\\\" --style \\\"google\\\" -i\" }, { \"label\" : \"run python file\" , \"description\" : \"run python file\" , \"filetypes\" : [ \".py\" ], \"inActive\" : true , \"cwd\" : \"${fileDirname}\" , \"command\" : \"python \\\"${file}\\\"\" } ] } please install yapf if you want to auto format python code.","title":"config"},{"location":"usage/python/#write-hello-world","text":"print ( 'hello world, python' ); After save the file, you can see the result.","title":"write hello world"},{"location":"usage/sfdx/","text":"Agenda \u00b6 Use xycode and Salesforce CLI to develope sfdc. config \u00b6 Config for windows user: xycode.sfdx.json Config for linux user: xycode.sfdx.json Config for mac user: xycode.sfdx.json Solution \u00b6 Create a project \u00b6 force:project:create Authentication \u00b6 force:auth:web:login Retrieve metadata \u00b6 force:source:retrieve:metadata Deploy metadata \u00b6 force:source:deploy:metadata force:source:deploy:current_file Diff metadata \u00b6 force:source:diff:metadata You can diff with any sfdc organization. diff source \u00b6 diff profile \u00b6 Useful Tips \u00b6 auto run apex anonymous code \u00b6 auto run apex anonymous code after save .apex. change the config: ~/.xycode/xycode.sfdx.json set inActive false as below. \"onSaveEvents\" : [ { \"label\" : \"auto run apex anonymous code.\" , \"description\" : \"run apex anonymous code after save.\" , \"filetypes\" : [ \".apex\" ], \"cwd\" : \"${fileDirname}\" , \"inActive\" : false , \"command\" : \"sfdx force:apex:execute --apexcodefile \\\"${file}\\\"\" } ] also, you can write a command and run .soql after you save. pretty apex code \u00b6 \"onSaveEvents\" : [ { \"label\" : \"pretty apex code.\" , \"description\" : \"use prettier-plugin-apex to format salesforce apex code. npm install --global prettier prettier-plugin-apex \" , \"filetypes\" : [ \".trigger\" , \".cls\" ], \"cwd\" : \"${fileDirname}\" , \"inActive\" : true , \"command\" : \"prettier --parser=apex --write \\\"${file}\\\" --tab-width=4 --single-quote=true\" }, { \"label\" : \"pretty apex anonymous code.\" , \"description\" : \"pretty apex anonymous code\" , \"filetypes\" : [ \".apex\" ], \"cwd\" : \"${fileDirname}\" , \"inActive\" : true , \"command\" : \"prettier --parser=apex --write \\\"${file}\\\" --tab-width=4 --single-quote=true --apex-anonymous\" }, ]","title":"Salesforce CLI in xycode"},{"location":"usage/sfdx/#agenda","text":"Use xycode and Salesforce CLI to develope sfdc.","title":"Agenda"},{"location":"usage/sfdx/#config","text":"Config for windows user: xycode.sfdx.json Config for linux user: xycode.sfdx.json Config for mac user: xycode.sfdx.json","title":"config"},{"location":"usage/sfdx/#solution","text":"","title":"Solution"},{"location":"usage/sfdx/#create-a-project","text":"force:project:create","title":"Create a project"},{"location":"usage/sfdx/#authentication","text":"force:auth:web:login","title":"Authentication"},{"location":"usage/sfdx/#retrieve-metadata","text":"force:source:retrieve:metadata","title":"Retrieve metadata"},{"location":"usage/sfdx/#deploy-metadata","text":"force:source:deploy:metadata force:source:deploy:current_file","title":"Deploy metadata"},{"location":"usage/sfdx/#diff-metadata","text":"force:source:diff:metadata You can diff with any sfdc organization.","title":"Diff metadata"},{"location":"usage/sfdx/#diff-source","text":"","title":"diff source"},{"location":"usage/sfdx/#diff-profile","text":"","title":"diff profile"},{"location":"usage/sfdx/#useful-tips","text":"","title":"Useful Tips"},{"location":"usage/sfdx/#auto-run-apex-anonymous-code","text":"auto run apex anonymous code after save .apex. change the config: ~/.xycode/xycode.sfdx.json set inActive false as below. \"onSaveEvents\" : [ { \"label\" : \"auto run apex anonymous code.\" , \"description\" : \"run apex anonymous code after save.\" , \"filetypes\" : [ \".apex\" ], \"cwd\" : \"${fileDirname}\" , \"inActive\" : false , \"command\" : \"sfdx force:apex:execute --apexcodefile \\\"${file}\\\"\" } ] also, you can write a command and run .soql after you save.","title":"auto run apex anonymous code"},{"location":"usage/sfdx/#pretty-apex-code","text":"\"onSaveEvents\" : [ { \"label\" : \"pretty apex code.\" , \"description\" : \"use prettier-plugin-apex to format salesforce apex code. npm install --global prettier prettier-plugin-apex \" , \"filetypes\" : [ \".trigger\" , \".cls\" ], \"cwd\" : \"${fileDirname}\" , \"inActive\" : true , \"command\" : \"prettier --parser=apex --write \\\"${file}\\\" --tab-width=4 --single-quote=true\" }, { \"label\" : \"pretty apex anonymous code.\" , \"description\" : \"pretty apex anonymous code\" , \"filetypes\" : [ \".apex\" ], \"cwd\" : \"${fileDirname}\" , \"inActive\" : true , \"command\" : \"prettier --parser=apex --write \\\"${file}\\\" --tab-width=4 --single-quote=true --apex-anonymous\" }, ]","title":"pretty apex code"}]}